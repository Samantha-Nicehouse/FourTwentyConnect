@page "/VendorRegistration";
@using dk.via.ftc.businesslayer.Models;
@using dk.via.ftc.web.Data;
@using System.Diagnostics
@using dk.via.ftc.web.Security
@using Newtonsoft.Json
@inject IAdminService AdminService
@inject ICountryService CountryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h3>Vendor Registration</h3>
@if (countries != null)
{
    <p>Registration with 420Connect is limited to vendors authorized to import cannabis products by the German Federal Instiute for
        Drugs and Medical Devices(BfArM).</p>
    <label>@result</label>
<EditForm Model="@newVendor" OnValidSubmit="@AddNewVendorAdmin">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
  <div class="form-group">
        Vendor Name:<br/>
        <InputTextArea rows="1" @bind-Value="newVendor.VendorName"/>
    </div>
    <div class="form-group">
        Vendor License:<br/>
        <InputTextArea rows="1" @bind-Value="newVendor.vendorLicense"/>
    </div>
    <div class="form-group">
        Vendor Country:<br/>
        <select class="form-control" style="width: 20%" @bind="newVendor.Country">

            <option value="Select Country"></option>

            @foreach (var country in countries)
            {
                <option value="@country.CountryName"> @country.CountryName </option>
            }
        </select>

    </div>

    <div class="form-group">
        Vendor State/Province:<br/>
        <InputTextArea rows="1" @bind-Value="newVendor.stateProvince"/>
    </div>
    <div class="form-group">
        Vendor City:<br/>
        <InputTextArea rows="1" @bind-Value="newVendor.City"/>
    </div>
    <div>
         <h2>Contact Information</h2> 
    </div>
   
     <div class="form-group">
            First Name:<br/>
            <InputTextArea rows="1" @bind-Value="newVendorAdmin.FirstName"/>
        </div>
        <div class="form-group">
            Last Name:<br/>
            <InputTextArea rows="1" @bind-Value="newVendorAdmin.LastName"/>
        </div>
    <div class="form-group">
        UserName:<br/>
        <InputTextArea rows="1" @bind-Value="newVendorAdmin.Username"/>
    </div>
    <div class="form-group">
        Password:<br/>
        <InputTextArea rows="1" @bind-Value="newVendorAdmin.Pass"/>
    </div>
    <div class="form-group">
        Email:<br/>
        <InputTextArea rows="1" @bind-Value="newVendorAdmin.Email"/>
    </div>
   
  
    <p class="actions">
        <button class="btn btn-primary" type="submit">Register</button>
        <button class="btn badge-secondary" type="submit">Cancel</button>
    </p>
</EditForm>
}
else
{
    <p class="bg-warning">
        Loading form data..
    </p>
}
@code {
    private readonly VendorAdmin newVendorAdmin = new VendorAdmin();
    private readonly Vendor newVendor = new Vendor();
    private string result { get; set; }
  
   
   
    protected override async Task OnInitializedAsync() {
        countries = await CountryService.GetCountriesAsync();
    }

   /* private void  usernameInUse()
    {
     <InputTextArea rows="1" @bind-Value="newVendorAdmin.Username" @bind-Value:event ="usernameInUse()"/>
        VendorAdmin vendorAdmin = newVendorAdmin();
        
        try
        {
            if (!newVendorAdmin.Username.Equals(""))
            {
                vendorAdmin.Username = newVendorAdmin.Username;
                string username = vendorAdmin.Username;
                 UserManager.userNameInUseAsync(string username);
            }
           
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Exception Message: " + ex.Message);
        }
    }*/

    private async Task AddNewVendorAdmin()
    {
       
        VendorVendorAdmin vvA = new VendorVendorAdmin();
        vvA.vendor = newVendor;
        vvA.vendorAdmin = newVendorAdmin;
        try
        {
           
            if (!newVendor.Country.Equals("") && !newVendorAdmin.Pass.Equals(" "))
            {
                foreach (Country country in countries)
                {
                    if (country.CountryName.Equals(newVendor.Country))
                    {
                        vvA.vendor.CountryCode = country.CountryCode;
                        vvA.vendorAdmin.Pass = Security.HashPassword(newVendorAdmin.Pass);
                        await AdminService.AddVendorVendorAdminAsync(vvA);
                        NavigationManager.NavigateTo("/");
                    }
                }
                
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Exception Message: " + ex.Message);
        }
    }
    private IList<Country> countries { get; set; }
}